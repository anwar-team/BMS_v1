<?php

namespace Database\Seeders;

use App\Models\Book;
use App\Models\BookIndex;
use App\Models\Chapter;
use App\Models\Page;
use App\Models\Volume;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class BookIndexSeeder extends Seeder
{
    use WithoutModelEvents;

    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // التأكد من وجود بيانات أساسية
        if (Book::count() === 0 || Page::count() === 0) {
            $this->command->warn('لا توجد كتب أو صفحات في قاعدة البيانات. يرجى تشغيل BookSeeder و PageSeeder أولاً.');
            return;
        }

        $this->command->info('بدء إنشاء فهارس الكتب...');

        // الحصول على عينة من الكتب
        $books = Book::with(['pages', 'chapters', 'volumes'])->take(10)->get();
        
        foreach ($books as $book) {
            $this->createIndexesForBook($book);
        }

        // إنشاء فهارس خاصة
        $this->createSpecialIndexes();
        $this->createAutoGeneratedIndexes();
        $this->createManualIndexes();

        $this->command->info('تم إنشاء ' . BookIndex::count() . ' فهرس بنجاح.');
    }

    /**
     * إنشاء فهارس لكتاب معين
     */
    private function createIndexesForBook(Book $book): void
    {
        $pages = $book->pages()->take(30)->get(); // أول 30 صفحة
        
        foreach ($pages as $page) {
            // عدد عشوائي من الفهارس لكل صفحة (2-10)
            $indexCount = fake()->numberBetween(2, 10);
            
            for ($i = 0; $i < $indexCount; $i++) {
                $this->createIndexForPage($book, $page);
            }
        }
    }

    /**
     * إنشاء فهرس لصفحة معينة
     */
    private function createIndexForPage(Book $book, Page $page): void
    {
        // اختيار فصل ومجلد عشوائي
        $chapter = $book->chapters()->inRandomOrder()->first();
        $volume = $book->volumes()->inRandomOrder()->first();
        
        // تحديد نوع الفهرس بناءً على الاحتمالات
        $indexType = $this->getRandomIndexType();
        
        BookIndex::factory()
            ->state([
                'book_id' => $book->id,
                'page_id' => $page->id,
                'chapter_id' => $chapter?->id,
                'volume_id' => $volume?->id,
                'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
            ])
            ->{$indexType}() // استخدام الحالة المناسبة
            ->create();
    }

    /**
     * اختيار نوع فهرس عشوائي بناءً على الاحتمالات
     */
    private function getRandomIndexType(): string
    {
        $types = [
            'keyword' => 35,   // 35% كلمات مفتاحية
            'person' => 20,    // 20% أشخاص
            'concept' => 20,   // 20% مفاهيم
            'place' => 10,     // 10% أماكن
            'hadith' => 10,    // 10% أحاديث
            'verse' => 5,      // 5% آيات
        ];
        
        $random = fake()->numberBetween(1, 100);
        $cumulative = 0;
        
        foreach ($types as $type => $percentage) {
            $cumulative += $percentage;
            if ($random <= $cumulative) {
                return $type;
            }
        }
        
        return 'keyword'; // افتراضي
    }

    /**
     * إنشاء فهارس خاصة للكتب المهمة
     */
    private function createSpecialIndexes(): void
    {
        $this->command->info('إنشاء فهارس خاصة للكتب المهمة...');
        
        $importantBooks = Book::where('status', 'published')
            ->where('visibility', 'public')
            ->orderBy('pages_count', 'desc')
            ->take(5)
            ->get();
        
        foreach ($importantBooks as $book) {
            // فهارس الأشخاص المهمين
            $this->createPersonIndexes($book);
            
            // فهارس المفاهيم الأساسية
            $this->createConceptIndexes($book);
            
            // فهارس الأحاديث
            $this->createHadithIndexes($book);
            
            // فهارس الآيات
            $this->createVerseIndexes($book);
        }
    }

    /**
     * إنشاء فهارس الأشخاص
     */
    private function createPersonIndexes(Book $book): void
    {
        $pages = $book->pages()->take(20)->get();
        
        foreach ($pages as $page) {
            if (fake()->boolean(40)) { // 40% احتمال وجود شخص في الصفحة
                BookIndex::factory()
                    ->person()
                    ->highRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
            }
        }
    }

    /**
     * إنشاء فهارس المفاهيم
     */
    private function createConceptIndexes(Book $book): void
    {
        $pages = $book->pages()->take(25)->get();
        
        foreach ($pages as $page) {
            if (fake()->boolean(60)) { // 60% احتمال وجود مفهوم في الصفحة
                BookIndex::factory()
                    ->concept()
                    ->highRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
            }
        }
    }

    /**
     * إنشاء فهارس الأحاديث
     */
    private function createHadithIndexes(Book $book): void
    {
        $pages = $book->pages()->take(15)->get();
        
        foreach ($pages as $page) {
            if (fake()->boolean(25)) { // 25% احتمال وجود حديث في الصفحة
                BookIndex::factory()
                    ->hadith()
                    ->highRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
            }
        }
    }

    /**
     * إنشاء فهارس الآيات
     */
    private function createVerseIndexes(Book $book): void
    {
        $pages = $book->pages()->take(20)->get();
        
        foreach ($pages as $page) {
            if (fake()->boolean(30)) { // 30% احتمال وجود آية في الصفحة
                BookIndex::factory()
                    ->verse()
                    ->highRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
            }
        }
    }

    /**
     * إنشاء فهارس مولدة تلقائياً
     */
    private function createAutoGeneratedIndexes(): void
    {
        $this->command->info('إنشاء فهارس مولدة تلقائياً...');
        
        $books = Book::take(8)->get();
        
        foreach ($books as $book) {
            $pages = $book->pages()->take(15)->get();
            
            foreach ($pages as $page) {
                // فهارس كلمات مفتاحية مولدة تلقائياً
                BookIndex::factory()
                    ->count(fake()->numberBetween(3, 8))
                    ->keyword()
                    ->autoGenerated()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                        'relevance_score' => fake()->randomFloat(2, 0.3, 0.8), // درجة أقل للمولد تلقائياً
                    ])
                    ->create();
            }
        }
    }

    /**
     * إنشاء فهارس يدوية
     */
    private function createManualIndexes(): void
    {
        $this->command->info('إنشاء فهارس يدوية...');
        
        $books = Book::take(5)->get();
        
        foreach ($books as $book) {
            $pages = $book->pages()->take(10)->get();
            
            foreach ($pages as $page) {
                // فهارس يدوية عالية الجودة
                BookIndex::factory()
                    ->count(fake()->numberBetween(2, 5))
                    ->manual()
                    ->highRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
            }
        }
    }

    /**
     * إنشاء فهارس متنوعة الأهمية
     */
    public function createVariedRelevanceIndexes(): void
    {
        $this->command->info('إنشاء فهارس متنوعة الأهمية...');
        
        $books = Book::take(3)->get();
        
        foreach ($books as $book) {
            $pages = $book->pages()->take(20)->get();
            
            foreach ($pages as $page) {
                // فهارس عالية الأهمية
                BookIndex::factory()
                    ->count(fake()->numberBetween(1, 3))
                    ->highRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
                
                // فهارس منخفضة الأهمية
                BookIndex::factory()
                    ->count(fake()->numberBetween(2, 6))
                    ->lowRelevance()
                    ->state([
                        'book_id' => $book->id,
                        'page_id' => $page->id,
                        'page_number' => $page->page_number ?? fake()->numberBetween(1, 500),
                    ])
                    ->create();
            }
        }
    }
}