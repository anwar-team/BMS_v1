<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Str;

class BookIndex extends Model
{
    use HasFactory;

    protected $fillable = [
        'book_id',
        'page_id',
        'chapter_id',
        'volume_id',
        'keyword',
        'normalized_keyword',
        'page_number',
        'context',
        'position_in_page',
        'frequency',
        'index_type',
        'relevance_score',
        'is_auto_generated'
    ];

    protected $casts = [
        'page_number' => 'integer',
        'position_in_page' => 'integer',
        'frequency' => 'integer',
        'relevance_score' => 'float',
        'is_auto_generated' => 'boolean'
    ];

    /**
     * العلاقة مع الكتاب
     */
    public function book(): BelongsTo
    {
        return $this->belongsTo(Book::class);
    }

    /**
     * العلاقة مع الصفحة
     */
    public function page(): BelongsTo
    {
        return $this->belongsTo(Page::class);
    }

    /**
     * العلاقة مع الفصل
     */
    public function chapter(): BelongsTo
    {
        return $this->belongsTo(Chapter::class);
    }

    /**
     * العلاقة مع المجلد
     */
    public function volume(): BelongsTo
    {
        return $this->belongsTo(Volume::class);
    }

    /**
     * تطبيع الكلمة المفتاحية عند الحفظ
     */
    protected static function boot()
    {
        parent::boot();

        static::saving(function ($model) {
            if ($model->keyword) {
                $model->normalized_keyword = static::normalizeKeyword($model->keyword);
            }
        });
    }

    /**
     * تطبيع الكلمة المفتاحية
     */
    public static function normalizeKeyword($keyword)
    {
        // إزالة التشكيل والرموز الخاصة
        $normalized = preg_replace('/[\x{064B}-\x{065F}\x{0670}\x{06D6}-\x{06ED}]/u', '', $keyword);
        // تحويل إلى أحرف صغيرة
        $normalized = Str::lower($normalized);
        // إزالة المسافات الزائدة
        $normalized = trim(preg_replace('/\s+/', ' ', $normalized));
        
        return $normalized;
    }

    /**
     * البحث في الفهارس
     */
    public function scopeSearch($query, $term)
    {
        $normalizedTerm = static::normalizeKeyword($term);
        
        return $query->where('normalized_keyword', 'like', "%{$normalizedTerm}%")
                    ->orWhere('keyword', 'like', "%{$term}%")
                    ->orWhere('context', 'like', "%{$term}%");
    }

    /**
     * تصفية حسب نوع الفهرس
     */
    public function scopeOfType($query, $type)
    {
        return $query->where('index_type', $type);
    }

    /**
     * الفهارس عالية الأهمية
     */
    public function scopeHighRelevance($query, $threshold = 0.7)
    {
        return $query->where('relevance_score', '>=', $threshold);
    }

    /**
     * ترتيب حسب الأهمية
     */
    public function scopeOrderedByRelevance($query)
    {
        return $query->orderBy('relevance_score', 'desc')
                    ->orderBy('frequency', 'desc');
    }

    /**
     * الفهارس المولدة تلقائياً
     */
    public function scopeAutoGenerated($query)
    {
        return $query->where('is_auto_generated', true);
    }

    /**
     * الفهارس اليدوية
     */
    public function scopeManual($query)
    {
        return $query->where('is_auto_generated', false);
    }

    /**
     * الحصول على السياق المختصر
     */
    public function getShortContextAttribute()
    {
        return str_limit($this->context, 150);
    }

    /**
     * تحديد ما إذا كانت الكلمة مهمة
     */
    public function getIsImportantAttribute()
    {
        return $this->relevance_score >= 0.7 || $this->frequency >= 5;
    }
}